// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserInfo {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  stripeID  String?  @unique
  teams     Team[]
}

model Team {
  id             String   @id @default(cuid())
  name           String
  plan           Int
  interviewer    String
  context        String
  members        UserInfo[]
  color          String
  logo           String
  stripeID       String?  @unique
  inviteID       String?  @unique
  interviews     Interview[]
  createdAt      DateTime @default(now())
}

model Interview {
  id             String   @id @default(cuid())
  name           String
  purpose        String
  responses      Int
  collect        Boolean
  guide          GuideQuestions[]
  transcript     Transcript[]
  externalID     String   @unique
  team           Team     @relation(fields: [teamId], references: [id])
  teamId         String
}

model GuideQuestions {
  id             String   @id @default(cuid())
  question       String
  interview      Interview @relation(fields: [interviewId], references: [id])
  interviewId    String
}

model Transcript {
  id             String   @id @default(cuid())
  convo          Json
  conducted      DateTime
  interview      Interview @relation(fields: [interviewId], references: [id])
  interviewId    String
}



